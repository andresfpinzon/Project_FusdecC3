// <auto-generated />
using System;
using FusdecMvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FusdecMvc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240907004524_unit")]
    partial class unit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FusdecMvc.Models.Attendance", b =>
                {
                    b.Property<Guid>("IdAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AttendanceStatus")
                        .HasColumnType("bit");

                    b.HasKey("IdAttendance");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("FusdecMvc.Models.Audit", b =>
                {
                    b.Property<Guid>("IdAudit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AuditDate")
                        .HasColumnType("date");

                    b.Property<Guid>("IdCertificate")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameOfIssuerAudit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAudit");

                    b.HasIndex("IdCertificate")
                        .IsUnique();

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("FusdecMvc.Models.Brigade", b =>
                {
                    b.Property<Guid>("IdBrigade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrigadeLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrigadeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BrigadeStatus")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdCommand")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdBrigade");

                    b.HasIndex("IdCommand");

                    b.ToTable("Brigade");
                });

            modelBuilder.Entity("FusdecMvc.Models.Certificate", b =>
                {
                    b.Property<Guid>("IdCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CertificateStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameOfIssuerCert")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCertificate");

                    b.HasIndex("IdStudent")
                        .IsUnique();

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("FusdecMvc.Models.Command", b =>
                {
                    b.Property<Guid>("IdCommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CommandStatus")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdFundation")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UbicacionComando")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCommand");

                    b.HasIndex("IdFundation");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("FusdecMvc.Models.Course", b =>
                {
                    b.Property<Guid>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CourseEstatus")
                        .HasColumnType("bit");

                    b.Property<string>("CourseHourlyIntensity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFundation")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdFundation");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FusdecMvc.Models.Edition", b =>
                {
                    b.Property<Guid>("IdEdition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseIdCourse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EditionEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("EditionStartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("IdCourse")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdEdition");

                    b.HasIndex("CourseIdCourse");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("FusdecMvc.Models.Fundation", b =>
                {
                    b.Property<Guid>("IdFundation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FundationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFundation");

                    b.ToTable("Fundations");
                });

            modelBuilder.Entity("FusdecMvc.Models.NonAttendance", b =>
                {
                    b.Property<Guid>("IdNonAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAttendance")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdReport")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdNonAttendance");

                    b.HasIndex("IdAttendance")
                        .IsUnique();

                    b.HasIndex("IdReport");

                    b.ToTable("NonAttendances");
                });

            modelBuilder.Entity("FusdecMvc.Models.Report", b =>
                {
                    b.Property<Guid>("IdReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReport");

                    b.ToTable("Reports");

                    b.HasDiscriminator().HasValue("Report");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FusdecMvc.Models.Schedule", b =>
                {
                    b.Property<Guid>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduleEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ScheduleStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ScheduleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSchedule");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("FusdecMvc.Models.School", b =>
                {
                    b.Property<Guid>("IdSchool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSchool");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("FusdecMvc.Models.Student", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSchool")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUnit")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolIdSchool")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StudentDateBirth")
                        .HasColumnType("date");

                    b.Property<string>("StudentGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnitIdUnit")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent");

                    b.HasIndex("SchoolIdSchool");

                    b.HasIndex("UnitIdUnit");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentAttendance", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAttendance")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent", "IdAttendance");

                    b.HasIndex("IdAttendance");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentEdition", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEdition")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent", "IdEdition");

                    b.HasIndex("IdEdition");

                    b.ToTable("StudentEditions");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentGrade", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdGrade")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent", "IdGrade");

                    b.HasIndex("IdGrade");

                    b.ToTable("StudentGrades");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentNonAttendance", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdNonAttendance")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStudent", "IdNonAttendance");

                    b.HasIndex("IdNonAttendance");

                    b.ToTable("StudentNonAttendances");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentSchedule", b =>
                {
                    b.Property<Guid>("IdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSchedule")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date");

                    b.HasKey("IdStudent", "IdSchedule");

                    b.HasIndex("IdSchedule");

                    b.ToTable("StudentSchedules");
                });

            modelBuilder.Entity("FusdecMvc.Models.Unit", b =>
                {
                    b.Property<Guid>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdBrigade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnitState")
                        .HasColumnType("bit");

                    b.HasKey("IdUnit");

                    b.HasIndex("IdBrigade");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FusdecMvc.Models.Grade", b =>
                {
                    b.HasBaseType("FusdecMvc.Models.Report");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ObservationGrade")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Grade");
                });

            modelBuilder.Entity("FusdecMvc.Models.Audit", b =>
                {
                    b.HasOne("FusdecMvc.Models.Certificate", "Certificate")
                        .WithOne("Audit")
                        .HasForeignKey("FusdecMvc.Models.Audit", "IdCertificate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("FusdecMvc.Models.Brigade", b =>
                {
                    b.HasOne("FusdecMvc.Models.Command", "Command")
                        .WithMany("Brigades")
                        .HasForeignKey("IdCommand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");
                });

            modelBuilder.Entity("FusdecMvc.Models.Certificate", b =>
                {
                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithOne("Certificate")
                        .HasForeignKey("FusdecMvc.Models.Certificate", "IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.Command", b =>
                {
                    b.HasOne("FusdecMvc.Models.Fundation", "Fundation")
                        .WithMany("Commands")
                        .HasForeignKey("IdFundation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fundation");
                });

            modelBuilder.Entity("FusdecMvc.Models.Course", b =>
                {
                    b.HasOne("FusdecMvc.Models.Fundation", "Fundation")
                        .WithMany("Courses")
                        .HasForeignKey("IdFundation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fundation");
                });

            modelBuilder.Entity("FusdecMvc.Models.Edition", b =>
                {
                    b.HasOne("FusdecMvc.Models.Course", "Course")
                        .WithMany("Editions")
                        .HasForeignKey("CourseIdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FusdecMvc.Models.NonAttendance", b =>
                {
                    b.HasOne("FusdecMvc.Models.Attendance", "Attendance")
                        .WithOne("NonAttendance")
                        .HasForeignKey("FusdecMvc.Models.NonAttendance", "IdAttendance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("IdReport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FusdecMvc.Models.Student", b =>
                {
                    b.HasOne("FusdecMvc.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolIdSchool")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Unit", "Unit")
                        .WithMany("Students")
                        .HasForeignKey("UnitIdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentAttendance", b =>
                {
                    b.HasOne("FusdecMvc.Models.Attendance", "Attendance")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("IdAttendance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentEdition", b =>
                {
                    b.HasOne("FusdecMvc.Models.Edition", "Edition")
                        .WithMany("StudentEditions")
                        .HasForeignKey("IdEdition")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithMany("StudentEditions")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentGrade", b =>
                {
                    b.HasOne("FusdecMvc.Models.Grade", "Grade")
                        .WithMany("StudentGrade")
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithMany("StudentGrades")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentNonAttendance", b =>
                {
                    b.HasOne("FusdecMvc.Models.NonAttendance", "NonAttendance")
                        .WithMany("StudentNonAttendance")
                        .HasForeignKey("IdNonAttendance")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithMany("StudentNonAttendances")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NonAttendance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.StudentSchedule", b =>
                {
                    b.HasOne("FusdecMvc.Models.Schedule", "Schedule")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("IdSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FusdecMvc.Models.Student", "Student")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FusdecMvc.Models.Unit", b =>
                {
                    b.HasOne("FusdecMvc.Models.Brigade", "Brigade")
                        .WithMany("Units")
                        .HasForeignKey("IdBrigade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FusdecMvc.Models.Grade", b =>
                {
                    b.HasOne("FusdecMvc.Models.Report", "Report")
                        .WithOne()
                        .HasForeignKey("FusdecMvc.Models.Grade", "IdReport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FusdecMvc.Models.Attendance", b =>
                {
                    b.Navigation("NonAttendance");

                    b.Navigation("StudentAttendances");
                });

            modelBuilder.Entity("FusdecMvc.Models.Brigade", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("FusdecMvc.Models.Certificate", b =>
                {
                    b.Navigation("Audit");
                });

            modelBuilder.Entity("FusdecMvc.Models.Command", b =>
                {
                    b.Navigation("Brigades");
                });

            modelBuilder.Entity("FusdecMvc.Models.Course", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("FusdecMvc.Models.Edition", b =>
                {
                    b.Navigation("StudentEditions");
                });

            modelBuilder.Entity("FusdecMvc.Models.Fundation", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("FusdecMvc.Models.NonAttendance", b =>
                {
                    b.Navigation("StudentNonAttendance");
                });

            modelBuilder.Entity("FusdecMvc.Models.Schedule", b =>
                {
                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("FusdecMvc.Models.School", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("FusdecMvc.Models.Student", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("StudentAttendances");

                    b.Navigation("StudentEditions");

                    b.Navigation("StudentGrades");

                    b.Navigation("StudentNonAttendances");

                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("FusdecMvc.Models.Unit", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("FusdecMvc.Models.Grade", b =>
                {
                    b.Navigation("StudentGrade");
                });
#pragma warning restore 612, 618
        }
    }
}
